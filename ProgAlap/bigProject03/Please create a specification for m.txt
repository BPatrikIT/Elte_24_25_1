Please create a specification for my code. Please use the same variable and function names as in the code. The specification dosent have to include the data input and output functions, but use the same input and output variable names as in the code for the "Be: " and "Ki:". 
Here is the link of the specification editor: https://progalap.elte.hu/specifikacio
Here is the usage of the specification editor: 
/**
Az eszköz használata:

1. Add meg a specifikációt
2. A jobb oldali panelen Ctrl+szóköz: ad egy alapstruktúrát
   Add meg az adatokat
3. Ha a teszteset zöldre vált, akkor 
   - az adatok kielégítették a specifikációt; vagy fordítva:
   - az adatok validálták a specifikáció helyességét
4. Az "Evaluate" gombbal lépésenként is megjeleníthető a kiértékelés
   (sajnos csak egyszerűbb esetekben működik, de debugolsához is jó.) 
*/
Be: n∈N, hallgatók∈Hallgató[1..n], Hallgató=(név:S x jegy:[1..5]),
    h∈Hallgató
Ki: benne∈L
Ef: -
Uf: benne=létezik index eleme [1..n]:(hallgatók[index].név = h.név)

Here is the specification of the specification editor:
/** Dokumentáció */

/** Bemeneti adatok leírása */
Be: /** Elemi halmazok */
    // Deklaráció: adatnév∈Halmaz
    // adatnév kisbetűvel kezdődik
    a∈N,            // Természetes számok halmaza, "a" a természetes számok közül EGY érték
                    // A deklarációkat vessző választja el
    a2 eleme N,     // eleme is használható
    b∈Z,            // Egész számok halmaza
    c∈R,            // Valós számok halmaza
    d∈L,            // Logikai számok halmaza
    e∈S,            // Szövegek halmaza
    f∈C, f2∈K,      // Karakterek halmaza

    /** Intervallumok */
    iv1∈[1..3],     // iv értéke 1 és 3 közé eshet

    /** Indexelt sorozatok, tömbök */
    /** Sok ugyanolyan (azonos típusú) elem kezelésére */
    // Természetes számok 3 hosszú tömbje, 1..3 indextartománnyal
    // Pontosabban: x1 annak a halmaznak az eleme, mely tartalmazza az összes 
    // 3 elemű 1..3 indextartományú természetes számokból álló sorozatot. 
    // Az összes lehetségesből az egyik.
    // (Később a tömb egy elemére hivatkozás: pl. x1[2])
    x1∈N[1..3],     
    // Természetes számok 3 hosszú tömbje, -1..1 indextartománnyal
    x2∈N[-1..1],
    // Gyakran a tömb elemszáma a bemenet része:
    n∈N, x∈Z[1..n],
    // Természetes számok valahány hosszú tömbje,
    // aktuális hosszát a konkrét bemenet határozza meg
    // lekérdezni a hossz(x3)-mal lehet majd, 
    // 1-től indexelve
    // Az előző példa egyszerűsített alternatívája, 
    // ahol a tömb hossza a konkrét adatból lekérdezhető
    x3∈N[1..],
    x4∈N[0..],      // ugyanez 0-tól indexelve
    x5∈N[],         // rövidítés, ekvivalens ezzel: x5∈N[1..]
    x6∈N[]=[5, 1, 2],   // tömb kezdőértékkel, konstans tömb 
    x7∈N[2+3..n*2], // az indextartomány elemei egyszerű kifejezések is lehetnek

    /** Mátrixok */
    m1∈Z[1..8,1..8],// 8x8-as mátrix, hivatkozás: pl. m1[3,6]
    m2∈Z[1..n,1..n],// nxn-es mátrix 
    m3∈Z[0..,0..],  // valahányszor valahányas mátrix 0-tól indexelve, az adatból kiderül a méret
    m4∈Z[,],        // ekvivalens: m4∈Z[1..,1..]
    m5∈Z[-1..1,-1..1] = [   // mátrix kezdőértékkel
        [2, 1, 2], 
        [1, 0, 1], 
        [2, 1, 1]
    ],

    /** Rekordok (struktúrák, objektumok) */ 
    /** Különböző típusú értékek egységbe zárására */
    // Egy szöveges érték és egy természetes szám egysége
    // Ez tkp. egy értékkettes, az ∈ jobb oldalán az összes lehetséges 
    // szöveg-természetes szám párból álló halmaz van, ennek egyik eleme lesz r1.
    // Az összes lehetséges értékpárost a direkt szorzat halmazművelettel állíthatjuk elő:
    // Azaz r1 az S x N halmazból veszi fel egy értékét.
    // Később a rekord részére a mezőnévvel lehet hivatkozni:
    // pl. r1.név
    r1∈név:S x jegy:N,
    r2∈(név:S x jegy:N),    // zárójelezhetők az ∈ után álló halmazok (bármelyik)
    r3∈(észak:L x kelet:L x dél:L x nyugat:L),  // összetetteb példa
    // A direkt szorzat összes lehetséges értékpárosa:
    // {(1,3), (1,4), (2,3), (2,4)}
    // Ebből az egyik lesz r4
    r4∈(m1:[1..2] x m2:[3..4]),
    
    /** Egyedi halmaznevek (típusok) */
    // Bármilyen eddig halmaznak adhatunk egy másik nevet
    // Formátuma: Halmaz1=Halmaz2
    // Az egyedi halmaznevek nagybetűvel kezdődnek
    j∈Jegy, Jegy=[1..5],
    // Akár hosszú átnevezési láncokat is alkothatunk
    j2∈Érdemjegy, Érdemjegy=EgytőlÖtig, EgytőlÖtig=[1..5],
    // Gyakran használjuk összetett adatszerkezetek átlátható leírására
    // Ehelyett:
    // h1∈(név:S x jegy:N)[1..]
    // Olvashatóbb, ha ezt írjuk:
    h2∈Hallgató[1..], Hallgató=(név:S x jegy:N),
    // Vagy ha egy hallgatónak több jegye is lehet
    h3∈HallgatóTömb, HallgatóTömb=Hallgató2[], Hallgató2=(név:S x jegyek:Jegy[]), // Jegy ld. fent
    // Ha nem mátrixot szeretnénk, hanem változó hosszúságú tömbök tömbjét, akkor:
    cikkcakk∈Sor[], Sor=N[]

/** Segédadatok leírása 
    Néha előfordul, hogy a kimeneti adatok megadásához közbülső segédadatokat használunk.
    Ezeket itt definiáljuk, és ugyanúgy megadandók az adatoknál!
*/
Sa: /** Ugyanolyan vesszővel elválasztott deklarációk, mint a bemenet esetében */
    sa∈N

/** Kimeneti adatok leírása */
Ki: /** Ugyanolyan vesszővel elválasztott deklarációk, mint a bemenet esetében */
    ki∈L,
    y∈N[]

/** Függvénydefiníciók 
    Lehetőség van egyedi függvények megadására oly módon, 
    ahogy az a középiskolai matematikaoktatásban is előfordult.
    Először megadjuk a függvény értelmezési tartományát és értékkészletét (halmazok),
    majd magadjuk a hozzárendelés módját.
*/
Fv: f:N->N, 
    f(p)=p*2            // kétszerező függvény
Fv: négyzet:Z->N, 
    négyzet(n)=n*n      // beszédesebb függvénynév
Fv: add:Z x Z->Z, 
    add(a,b)=a+b        // több bemeneti paraméter, az x előtt és mögött szóköz kell!
Fv: csere:Z x Z->Z x Z, 
    csere(a, b)=(b, a)  // visszatérés tuple-lel
Fv: f2:Z -> Z, f2(p)=p+n// rálát a deklarált változókra (kivéve, ha egy paraméter kitakarja a nevet)
Fv: jegy:Hallgató->N, 
    jegy(h)=h.jegy      // Rekordparaméter
Fv: index:N[] x N->N, 
    index(x,i)=x[i]     // Tömbparaméter

/** A bemeneti adatokra vonatkozó előfeltételek megadása.
    Az előfeltétel a bemeneti adatokra vonatkozó logikai kifejezés, 
    amely igaz értéke esetén van értelme a program végrehajtásának

    A logikai kifejezés a szokásos logikai operátorokat tartalmazza (és, vagy, nem),
    szokásos összehasonlító operátorokkal (=,<,>,<=,>=),
    illetve az elsőrendű logika pár összetettebb elemével (létezik, minden)
*/
// Ef: -    // A legegyszerűbb előfeltétel, ekvivalens: Ef: igaz
Ef: igaz és
    nem hamis és
    3=3 és
    n>0 és  // Bemeneten deklarált adatokra hivatkozhatunk
    (3<4 vagy ((3)>4)) és   // tetszőleges mennyiségű zárójel
    
    (igaz -> igaz) és       // implikáció, akkor hamis, ha igazból hamis következik
    nem(igaz -> hamis) és   // ez egyedül hamis, így negáljuk, hogy az előfeltétel igaz maradjon
    (hamis -> igaz) és      // igaz
    (hamis -> hamis) és     // igaz
    
    // Összetettebb: ha egy intervallum minden elemére szeretnénk mondani valamit
    // Pl. az 1..3 intervallum minden eleme nagyobb, mint 0
    // Azaz: minden i-re, ami [1..3] eleme, igaz, hogy i>0
    minden i eleme [1..3]:(i>0) és
    ∀i∈[1..3]:(i>0) és      // rövidebb formában, de ugyanúgy olvassuk, mint fent
    // Ezzel kiválóan lehet sok elemre egyszerre kimondani valamit
    // Pl. tömbökben sok elem van, 
    // ezért végigmegyünk az indextartományon és a tömb minden elemére mondunk valamit:
    // (n és x deklarációját lásd fent)
    ∀i∈[1..n]:(x[i]>10) és

    // A másik összetett operátorunk azt mondja ki egy intervallumra, 
    // hogy benne létezik olyan elem, amelyre egy tulajdonság igaz
    // Pl. Az 1..3 intervallumban van olyan érték, amely 2.
    // Azaz létezik az 1..3 inetrvallumnak olyan eleme, hogy az az elem 2
    létezik i eleme [1..3]:(i=2) és
    ∃i∈[1..3]:(i=2) és  // rövidebben
    // Ugyanez különösen tömbök esetében hasznos
    // Pl. létezik az x tömbnek egy olyan indexe, amelyhez tartozó érték <3
    ∃i∈[1..n]:(x[i]<3) és

    // Ha a tömbnek nem deklaráltuk az indextartomány végét, használjuk a hossz() függvényt
    ∃i∈[1..hossz(x3)]:(x3[i]<3) és
    // Akár az indextartomány is lekérdezhető:
    ∃i∈[tól(x3)..ig(x3)]:(x3[i]<3) és

    // Két dimenziós tömb esetén (mátrix) a sorokra és 
    // a sorokon belül az elemekre is mondani kell valamit
    // Pl. egy mátrix minden sorára igaz, hogy benne létezik 10-es érték
    ∀i∈[1..8]:(∃j∈[1..8]:(m1[i,j]=10)) és

    // Rekordoknál nincs különlegesség
    r1.név="Győző" és r1.jegy=5 és

    // Tuple-ök is használhatók.
    // Ezeket deklarálni (még) nem lehet.
    // Arra használjuk őket, hogy gyorsan összefogjunk több értéket anélkül, 
    // hogy pl. rekordot kellene definiálnunk.
    // Tuple elemeire számokkal tudunk hivatkozni
    (3, 5)=(3, 5) és
    (3, 5).1=3 és (3, 5).2=5 és
    // A programozási mintáknál használjuk őket intenzíven 
    // (ott nevesítetten is hozzáférhetünk az értékekhez)

    // Tömbliterál használata (ritka!)
    [1, 2, 3]=[1, 2, 3] és
    [0..:1, 2, 3]=[0..:1, 2, 3] és  // indextartomány megadásával
    [[1, 2], [3, 4]]=[1..,1..:[1, 2], [3, 4]] és  // mátrixokra is működik az indexmegadás

    igaz

/** Az utófeltétel a specifikáció legfontosabb része.
    Ez is egy logikai állítás, mely a bemeneti és kimeneti adatok kapcsolatát írja le,
    pontosabban akkor lesz igaz, ha egy adott (előfeltételnek megfelelő) bemeneti adathoz
    az elvárásoknak megfelelő kimeneti adatot adjuk meg. 
    Az utófeltételben szerepelnie kell minden deklarált adatnak.
    A logikai kifejezésnek ugyanazok az elemei, mint az előfeltétel esetén.
*/
// Mivel most nem lenne értelme minden adatra valamilyen állítást felírnunk,
// ezért most elhagyjuk az utófeltétel leírását.
Uf: igaz

Please create the specification for my code based on the examples before:
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace legtobbszorMelegNapok_BartokPatrik_mndj3p_komplexBead
{
    internal class Program
    {
        static int settlementCount, dayCount;
        static int[,] tempForecast;
        static int[] maxTempDays;

        static void ReadData()
        {
            string[] line = Console.ReadLine().Split(' ');
            settlementCount = int.Parse(line[0]);
            dayCount = int.Parse(line[1]);
            tempForecast = new int[settlementCount, dayCount];
            for (int i = 0; i < settlementCount; i++)
            {
                line = Console.ReadLine().Split(' ');
                for (int j = 0; j < dayCount; j++)
                {
                    tempForecast[i, j] = int.Parse(line[j]);
                }
            }
        }

        static void maxTempDay(int j) 
        {
            List<int> maxTempDaysIndex = new List<int>();
            int maxTempDay = tempForecast[0, j];
            maxTempDaysIndex.Add(0);
            for (int i = 1; i < settlementCount; i++)
            {
                if (tempForecast[i, j] > maxTempDay)
                {
                    maxTempDaysIndex.Clear();
                    maxTempDay = tempForecast[i, j];
                    maxTempDaysIndex.Add(i);
                }
                else if (tempForecast[i, j] == maxTempDay)
                {
                    maxTempDaysIndex.Add(i);
                }
            }

            for (int i = 0; i < maxTempDaysIndex.Count(); i++)
            {
                maxTempDays[maxTempDaysIndex[i]]++;
            }
        }

        static void maxTempDayAll()
        {
            maxTempDays = new int[settlementCount];

            for (int j = 0; j < dayCount; j++)
            {
                maxTempDay(j);
            }
        }

        static void findMaxSettlement()
        {
            int max = maxTempDays[0];
            for (int i = 1; i < maxTempDays.Length; i++)
            {
                if (maxTempDays[i] > max)
                {
                    max = maxTempDays[i];
                }
            }
            List<int> hottestSettlement = new List<int>();
            for (int i = 0; i < maxTempDays.Length; i++)
            {
                if (maxTempDays[i] == max)
                {
                    hottestSettlement.Add(i + 1);
                }
            }
            PrintResult(hottestSettlement);
        }

        static void PrintResult(List<int> hottestSettlement)
        {
            int hottestSettlementLength = hottestSettlement.Count();
            Console.Write(hottestSettlementLength);
            foreach (int i in hottestSettlement)
            {
                Console.Write(" " + i);
            }
        }
        static void Main(string[] args)
        {
            ReadData();
            maxTempDayAll();
            findMaxSettlement();
        }
    }
}

Here is the whole task:

Legtöbbször legmelegebb települések 
A meteorológiai intézet az ország N településére adott M napos időjárás előrejelzést, az adott te
lepülésen az adott napra várt legmagasabb hőmérsékletet. 
Készíts programot, amely megadja azokat a településeket, amelyeken a legtöbbször fordul elő va
lamelyik napi előrejelzések maximuma! 
Bemenet  
A standard bemenet első sorában a települések száma (1≤N≤1000) és a napok száma 
(1≤M≤1000) van. Az ezt követő N sorban az egyes napokra jósolt M hőmérséklet értéke találha
tó (-50≤Hi,j≤50). 
Kimenet  
A standard kimenet első sorába azon települések T számát kell kiírni, amelyeken a leg
többször fordul elő valamelyik napi előrejelzések maximuma! Ezt kövesse ezen települések sor
száma, növekvő sorrendben! 
Példa  
Bemenet
3 5
10 15 12 10 10 
11 11 11 11 20 
12 16 16 16 20

Kimenet
1 3

Please use these test cases to test the specification in the editor.
Still getting error:
ine 27, column 13: Expected "!=", "%", ")", "*", "+", ",", "-", "->", "/", "<", "<=", "<>", "=", ">", ">=", "and", "div", "mod", "or", "vagy", "|", "és", "∤", "≠", "≤", "≥", eleme, ∈, or white space but "t" found.

https://progalap.elte.hu/specifikacio/?data=H4sIAAAAAAAACo1TS2%2FaQBD%2BKyOf7NQYu1Iuq1IpLy55XNJKUQmqNnggi%2B1d5F1QCCDl6Gt%2FQo4ccsq1t1X%2FCL%2Bk2mCoH4B6sLSaGX%2BPecwsOcIe67MeVUxwi1jNoyM4F9E4Qa70a4%2Fpdzhq3qf33HwmeYoJclQMaEiViCBG%2FZbqV0nzulMkIFGp2NSpMzHmapVlN67JAQCEdFoPKkxGbZFij0qT%2BNHxPa8C0ghc8D1v83sj6BZV3eJAL8M9km4pgYQ%2BfcNkdE6n0jDvJCghXrLDPi8ZgUehFEp1uwW6Qj5QjyVrtZoP%2BsDz9vxcEtHWvweDiV7yaYh9xvWbGUiUK2hPtrbaIj2nUwI30PgK%2F7hLWXvoQAuuT%2B7sCFZZBrtb4JZm0YlcGHadjSTDyOR1lfNpzXu15a3U2MyFD3K7hG2iXWjVVDrFDpzAQ3nhUgoTwamKxLN%2BB4z%2F%2FOpjrPRSYYwRJDigoZmSlzfpok8ggC%2Bt6k6aUOD7Puil3Mj%2BqNss2K6CVfbCVlm2u3PEXmUvwzxdWFNiN459g1YxP%2Bya4LFf8fsMY6Xft56AQn6iUX6OMQ76gish6cMDpHopn3Fj9nuf%2FKfUwjl0mBnCfDbcbkVBPMx3D3Mxd4qNiVFtnvne%2FRQTTGkc5yvHDq5cWY3jFrFqZwItmLFPwRowqAEayTV3BUGLw%2BjrIzQNqaXm2%2FXmRYhV9hKZTh84aWLXMp3IdHevB72UJRd7ABqBU7HnQLMJZyJNsacwJHDxpFIKI5oiV48oUVquZYCkRTozK6SKWsSyXIvTBNevFOU4Vhb5vOgu%2FgKWTH6pIAYAAA%3D%3D
